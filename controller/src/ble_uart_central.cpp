#include "ble_uart_central.h"
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEClient.h>
#include <Arduino.h>

// UUID —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ BLE UART (Nordic)
static BLEUUID UART_SERVICE_UUID("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
static BLEUUID UART_CHAR_RX_UUID("6E400003-B5A3-F393-E0A9-E50E24DCCA9E"); // RX ‚Üê —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ø—É–ª—å—Ç–∞
static BLEUUID UART_CHAR_TX_UUID("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"); // TX ‚Üí –∫–æ–º–∞–Ω–¥—ã –ø—É–ª—å—Ç—É

static BLEClient* bleClient = nullptr;
static BLERemoteCharacteristic* uartRXChar = nullptr;
static BLERemoteCharacteristic* uartTXChar = nullptr;

static bool bleConnected = false;

// ==== –ö–æ–ª–±—ç–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è ====
class CentralClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) override {
    Serial.println("[BLE] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Peripheral");
  }
  void onDisconnect(BLEClient* pclient) override {
    Serial.println("[BLE] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Peripheral");
    bleConnected = false;
  }
};

// ==== –ö–æ–ª–±—ç–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å UART RX ====
class RXNotifyCallback {
public:
  static void onNotify(BLERemoteCharacteristic* pCharacteristic, uint8_t* data, size_t length, bool isNotify) {
    Serial.print("[BLE] üì• –ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ");
    for (size_t i = 0; i < length; i++) {
      Serial.write(data[i]);
    }
    Serial.println();
  }
};

void initBLECentral() {
    BLEDevice::init("CAMERA_CONTROLLER");
  
    BLEScan* scan = BLEDevice::getScan();
    scan->setActiveScan(true);
    BLEScanResults results = scan->start(5);
  
    for (int i = 0; i < results.getCount(); ++i) {
      BLEAdvertisedDevice device = results.getDevice(i);
  
      // === üîé –£—Ç–æ—á–Ω—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏ –∏–º—è, –∏ UUID ===
      if (device.haveServiceUUID() &&
          device.isAdvertisingService(UART_SERVICE_UUID) &&
          device.haveName() &&
          device.getName() == "PULT_UART") {
  
        Serial.print("[BLE] üîé –ù–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π Peripheral: ");
        Serial.println(device.toString().c_str());
  
        bleClient = BLEDevice::createClient();
        bleClient->setClientCallbacks(new CentralClientCallback());
  
        if (!bleClient->connect(&device)) {
          Serial.println("[BLE] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è");
          return;
        }
  
        BLERemoteService* uartService = bleClient->getService(UART_SERVICE_UUID);
        if (!uartService) {
          Serial.println("[BLE] ‚ùå UART-—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
          return;
        }
  
        uartRXChar = uartService->getCharacteristic(UART_CHAR_RX_UUID);
        if (uartRXChar && uartRXChar->canNotify()) {
          uartRXChar->registerForNotify(RXNotifyCallback::onNotify);
          Serial.println("[BLE] ‚úÖ RX —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã");
        }
  
        uartTXChar = uartService->getCharacteristic(UART_CHAR_TX_UUID);
        if (uartTXChar && uartTXChar->canWrite()) {
          Serial.println("[BLE] ‚úÖ TX —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ");
        }
  
        bleConnected = true;
        break;
      }
    }
  
    if (!bleConnected) {
      Serial.println("[BLE] ‚ùå UART BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∏–º–µ–Ω–µ–º 'PULT_UART' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }
  }

void processBLECentral() {
  // –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å reconnection
}

bool isBLEConnected() {
  return bleConnected;
}

bool sendToPeripheral(const std::string& message) {
  if (bleConnected && uartTXChar) {
    try {
      uartTXChar->writeValue((uint8_t*)message.data(), message.length());
      Serial.print("[BLE] üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Peripheral: ");
      Serial.println(message.c_str());
      return true;
    } catch (...) {
      Serial.println("[BLE] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
    }
  }
  return false;
}